q
ZktClient.call
ZktClient.host
ZktClient.instance.call
ZktClient.call
c
q
ZktClient.host + ''
ZktClient.host
q
Configuration.instance.credentials_missing?
Configuration.credentials_missing?
Configuration.credentials_missing
Configuration
self.class.name
self.class
self.superclass
fself.superclass
self.sub_class
self
class
c
ZktClient.host.blank?
ZktClient.host._blank?
q
ZktClient.host.class
ZktClient.host._blank?
ZktClient.host.blank?
ZktClient.host
ZktClient.credentials_missing?
q
ZktClient.credentials_missing?
ZktClient
name
self.name
self.class
self.class.name
self
ZktClient.host
ZktClient
def_delegators(:configuration, *ZktClient::Configuration.instance_methods(false))
self.configuration
configuration
c
self.host
self.credentials_missing?
self
credentials_missing?
q
credentials_missing?
def_delegators(:configuration, *ZktClient::Configuration.instance_methods(false))
Configuration.instance
self.host
self
configuration
credentials_missing?
c
q
'iclock/api/transactions/' == 'iclock/api/transctions/'
url
c
q
body
params
url
method
c
attributes
c
expect(subject.access_token._present?).to be_truthy
subject.access_token._present?
subject.access_token.include?('Token')
subject.access_token
subject
q
described_class.new
q
described_class
ZktClient::TokenGenerator.instance.access_token
ZktClient::TokenGenerator.instance
ZktClient::TokenGenerator.new
ZktClient::TokenGenerator
ZktClient::TokenGenerator.new.access_token
ZktClient.new.access_token
ZktClient.access_token
subject
q
ZktClient.host
q
self.class.name
self.class_name
name
quit
self.extend(ZktClient::Models::Concerns::ClassMethods).where
self.extend(ZktClient::Models::Concerns::ClassMethods)
self
q
self.credentials_missing?
self.host
self
c
block_given?
c
ZktClient.host
configuration.host
q
Q
ob.host = 'sd'
ob.host
ob = Configuration.new
Configuration.new.host = 'sdsd'
block_given?
block
&block
block
self.host
self
block
c
credentials_missing?
q
credentials_missing?
q
host
self
credentials_missing?
c
q
 Configuration.instance
q
''._present?
q
''._blank?
''._present?
''.present?
''._present?
c
self.name
ZktClient::PATH
q
ZktClient::PATH
c
response = connection.send(method) {|req| req.body = {}.to_json}
connection = Faraday.new( url: url,params: {:sn=>"RR", :ip_address=>"192.168.0.1", :alias=>"Baqtyan"},headers: {"Content-Type" => "application/json", "Authorization" => token})
body
params
response = connection.send(method) {|req| req.body = body.to_json}
connection = Faraday.new( url: url,params: params,headers: {"Content-Type" => "application/json", "Authorization" => token})
token
connection = Faraday.new( url: url,params: params,headers: {
body
params
url
method
c
attributes
c
q
c
q
instance_variable_set("@#{key}", attributes[key])
self.class.send(:attr_reader, key)
attributes
key
c
self.new({id: 10})
self.new({})
new({})
new
self.new
self
new(hash)
hash
c
@collection = HttpClient.get(url)["data"]
HttpClient.get(url)["data"]
c
url
c
url
method
c
ZktClient.host
url(id)
get_resource(id)
q
get_resource(id)
q
HttpClient
url(id)
q
url
q
ZktClient::PATH[self.name]
self.name
self
c
id
c
url
c
q
c
HttpClient.put
q
HttpClient.put
q
HttpClient
ZktClient::PATH[self.class.name] + "1/"
ZktClient::PATH[self.class.name]
self.class.name
self.class_name
self.class
class
ZktClient::PATH[self.class.to_s]
ZktClient::PATH
self.class
c
self.class
self
c
C
ZktClient::PATH
ZktClient
c
quit
ZktClient::Constants::PATH
c
ZktClient::Constants::PATH
ZktClient::Constants
c
q
self::PATH
self
self.class::PATH
self.class.path
self.class
PATH
self.class::PATH
self.class
q
self.class::PATH
self.class
self.path
self.PATH
self::PATH
self
q
post(url, params)
params
url
c
post(url, params)
url
post(url, params)
params = {username: 'ss', password: 'ss'}
